#注意  放开pom文件shardingsphere和数据库连接池druid的依赖


#读写分离
mybatis.mapper-locations=classpath:mappers/*.xml




# 配置逻辑库
spring.shardingsphere.datasource.names=m1,s0
# 配置第 1 个数据源
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/sharding?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

# 配置第 2 个数据源
spring.shardingsphere.datasource.s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.s0.url=jdbc:mysql://localhost:3306/sharding?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
spring.shardingsphere.datasource.s0.username=root
spring.shardingsphere.datasource.s0.password=123456

#指定表主键生成策略及唯一性，主要用来进行生成id
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE

#设置主从配置，都映射到ds0的名称上
#声明主数据源的配置是m1
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m1
#声明从数据源的配置时s0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=s0

# 指定数据最终映射到哪些表上
# 配置从数据库的数据节点,次节点表示包含主从数据源的数据节点映射，需要注释掉原来主数据源的节点配置
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds0.user_$->{1..2}


# 指定数据映射到不同表上的策略规则
# 指定逻辑插入方式分片策略，根据id映射到user1或user2表上，属于水平分表
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id % 2 +1}


#打印sql
spring.shardingsphere.props.sql.show=true

# 允许bean覆盖，防止bean和springboot注入冲突
spring.main.allow-bean-definition-overriding=true

# 日志级别设置
logging.level.root=info
logging.level.org.springframework.web=info
logging.level.com.example.sharding=debug
logging.level.druid.sql=debug




#开启Mybatis下划线命名转驼峰命名
#mybatis.configuration.map-underscore-to-camel-case=true
server.port=8088
#控制台打印SQL
logging.level.com.example.task.mapper=debug
#控制台打印SQL
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# Redis数据库索引（默认为0）
spring.redis.database=1
# Redis服务器地址
#spring.redis.host=172.16.20.103
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
#spring.redis.password=limy
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.poolMaxActive=20
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.poolMaxWait=-1
# 连接池中的最大空闲连接
spring.redis.poolMaxIdle=8
# 连接池中的最小空闲连接
spring.redis.poolMinIdle=0
# 连接超时时间（毫秒）
spring.redis.timeout=5000


#jasypt加密的密匙（写到启动参数里面）
jasypt.encryptor.password=hbq




