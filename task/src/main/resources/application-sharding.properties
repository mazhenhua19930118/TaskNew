#注意  放开pom文件shardingsphere和数据库连接池druid的依赖

mybatis.mapper-locations=classpath:mappers/*.xml

#仅分表
#sharding-jdbc的配置
#声明一个数据库(虚拟的)
#spring.shardingsphere.datasource.names=db1
##声明虚拟数据库对应的连接,驱动,用户名,密码,连接池等信息
#spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
##spring.shardingsphere.datasource.db1.url=jdbc:mysql://localhost:3306/sharding?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
#spring.shardingsphere.datasource.db1.url=jdbc:mysql://localhost:3306/sharding?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
#spring.shardingsphere.datasource.db1.username=root
#spring.shardingsphere.datasource.db1.password=123456
#spring.shardingsphere.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
#声明 表存放在对应的数据库 $->{0..1} 就是行内表达式
#这里的意思是db1库内有user虚拟表指向 user_1和user_2
#spring.shardingsphere.sharding.tables.user.actual-data-nodes=db1.user_$->{1..2}
##设置主键字段
#spring.shardingsphere.sharding.tables.user.key-generator.column=id
## 设置主键生成策略 可选内置的 SNOWFLAKE(雪花算法)/UUID
##也可以自定义(实现ShardingKeyGenerator,并配置META-INF/services/org.apache.shardingsphere.spi.keygen.ShardingKeyGenerator)
#spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
##设置 根据哪个字段进行分片
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
##分片规则奇数存入user_1  偶数存入user_2
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id % 2 != 0 ? 1:2}
#spring.shardingsphere.props.sql.show=true


#分库分表
# 配置逻辑库
spring.shardingsphere.datasource.names=db1,db2
# 配置第 1 个数据源
spring.shardingsphere.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.url=jdbc:mysql://localhost:3306/sharding1?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=123456

# 配置第 2 个数据源
spring.shardingsphere.datasource.db2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db2.url=jdbc:mysql://localhost:3306/sharding2?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&rewriteBatchedStatements=true
spring.shardingsphere.datasource.db2.username=root
spring.shardingsphere.datasource.db2.password=123456
# 配置 user 表规则
spring.shardingsphere.sharding.tables.user.actual-data-nodes=db$->{1..2}.user_$->{1..2}
# 配置 user 主键生成策略
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
#配置 表分片策略
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{ (id % 2)+1 }
#配置 库分片策略(主要就是增加了这个配置)
spring.shardingsphere.sharding.tables.user.database-strategy.inline.sharding-column=age
spring.shardingsphere.sharding.tables.user.database-strategy.inline.algorithm-expression=db$->{ (age>18 ? 2:1) }
#打印sql
spring.shardingsphere.props.sql.show=true



#开启Mybatis下划线命名转驼峰命名
#mybatis.configuration.map-underscore-to-camel-case=true
server.port=8088
#控制台打印SQL
logging.level.com.example.task.mapper=debug
#控制台打印SQL
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# Redis数据库索引（默认为0）
spring.redis.database=1
# Redis服务器地址
#spring.redis.host=172.16.20.103
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
#spring.redis.password=limy
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.poolMaxActive=20
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.poolMaxWait=-1
# 连接池中的最大空闲连接
spring.redis.poolMaxIdle=8
# 连接池中的最小空闲连接
spring.redis.poolMinIdle=0
# 连接超时时间（毫秒）
spring.redis.timeout=5000


#jasypt加密的密匙（写到启动参数里面）
jasypt.encryptor.password=hbq




